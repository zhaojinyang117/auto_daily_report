<月度计划：2025-03>

<2025-03-27>

Django ORM 基础回顾
模型定义：定义使用Django中的ORM，例如创建学生和班级的模型。

python
class Student(models.Model):
    name = models.CharField(max_length=100)
    age = models.IntegerField()
    gender = models.IntegerField(choices=(0, "男"), (1, "女"))

class ClassInfo(models.Model):
    name = models.CharField(max_length=200)
    college = models.CharField(max_length=200)
创建表记录：使用ORM创建数据库表中的记录。

python
student = Student.objects.create(name="王五", age=20, gender=0)
</2025-03-27>

<2025-03-28>

关联模型的基本操作
一对多关系：一个班级对应多个学生。

python
class Student(models.Model):
    name = models.CharField(max_length=100)
    age = models.IntegerField()
    gender = models.IntegerField(choices=(0, "男"), (1, "女"))
    class_info = models.ForeignKey(ClassInfo, on_delete=models.CASCADE)
多对多关系：一个学生可以选多门课程，一门课程也可以有多个学生。

python
class Student(models.Model):
    courses = models.ManyToManyField(Course)
一对一关系：一个学生对应一个详细信息。

python
class StudentDetail(models.Model):
    student = models.OneToOneField(Student, on_delete=models.CASCADE)
    id_card = models.CharField(max_length=18)
</2025-03-28>

<2025-03-29>

关联查询（基于双下划线的关联查询）
跨关系查询: 通过双下划线（__)进行跨模型的查询。

python
students = Student.objects.filter(class_info__college="计算机学院")
students = Student.objects.filter(courses__name="Python编程")
join查询: 使用select_related或prefetch_related进行预加载。

python
students = Student.objects.select_related('class_info').all()
courses = Course.objects.prefetch_related('students').all()
</2025-03-29>

<2025-03-30>

关联添加与删除
关联添加:

python
class_obj = ClassInfo.objects.get(name="计算机科学1班")
student1.courses.add(course)  # 多对多
student1.class_info = class_obj  # 一对多
关联删除:

python
# CASCADE方式删除
class_obj = ClassInfo.objects.get(name="计算机科学1班")
class_obj.delete()
</2025-03-30>

<2025-03-31>

高级查询与事务管理
聚合与分组:

python
from django.db.models import Count, Avg
courses_stats = Course.objects.annotate(avg_age=Avg('students__age'))
事务管理:

python
from django.db import transaction

@transaction.atomic
def transfer_student(student_id, new_class_id):
    student = Student.objects.get(id=student_id)
    new_class = ClassInfo.objects.get(id=new_class_id)
    student.class_info = new_class
    student.save()
</2025-03-31>

