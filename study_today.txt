<正文>
### 模板渲染原理

1. **获取模板文件**：通过 `get_template()` 方法获取模板文件，假设需要渲染的模板为 `index.html`。
   
2. **获取数据**：定义一个字典 `context` 来存储要在模板中渲染的数据。

3. **渲染模板**：使用 `template.render()` 方法渲染模板，并传入数据和请求对象。

### 模板语法

#### 1. 变量渲染

- **基本用法**：在模板中使用 `{{ val }}` 来显示变量。
- **过滤器**：使用管道符 `|` 进行过滤，如 `{{ val|filter_name:value }}`。
- **深度查询**：使用句点符 `.` 进行深度查询，如 `{{ book_list.1 }}` 或 `{{ info.name }}`。

#### 2. 标签

- **if标签**：条件语句，如 `{% if age > 18 %}...{% endif %}`。
- **for标签**：循环语句，如 `{% for book in book_list %}...{% endfor %}`。

#### 3. 嵌套和继承

模板可以通过继承来构建复杂的结构，如 `{% extends 'base.html' %}`。

### 过滤器

- **内置过滤器**：如 `last`、`length`、`default`、`date`等。
- **自定义过滤器**：在 `templatetags` 目录下创建并注册自己的过滤器。

### locals()函数

`locals()` 可以自动将当前作用域中的变量传递给模板，但会传递所有局部变量，因此可能影响性能。  

### 示例总结

在模板渲染中，可以使用变量、标签、过滤器等语法来实现复杂的动态页面渲染。常见用法包括渲染列表、条件判断、循环输出等。自定义过滤器可以扩展模板的功能。

一个小机制：

比如你的path是`”login”`，那你在浏览器中输入`login/`就会报错

但如果你的path是`“login/”`，那你在浏览器中输入`login`就会发起一个重定向，指向`login/`

在seetings中，存在一个配置`APPEND_SLASH`默认为`True`

但如果指明`APPEND_SLASH=False`，那么就不再会进行跳转
</正文>
